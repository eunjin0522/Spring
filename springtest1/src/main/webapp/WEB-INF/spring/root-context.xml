<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	<!-- Root Context: defines shared resources visible to all other web components -->
	
	<!-- namespace 에서 context체크  classpath: 소스폴더를 의미-->
	<!-- propeties를 모아둔 폴더 전체를 location으로 지정 -->
	<context:property-placeholder location="classpath:keyproperties/*"/>
	
	<!-- DB연동 관련 Bean들 -->
	<!-- DBCP -->
	<bean class="org.apache.commons.dbcp2.BasicDataSource" id="dataSource" destroy-method="close">
		<property name="driverClassName" value="${db.driverClassName}"></property>
		<property name="url" value="${db.url}"></property>
		<property name="username" value="${db.userName}"></property>
		<property name="password" value="${db.password}"></property>
	</bean>
	<!-- mybatis -->
	<bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
		<property name="dataSource" ref="dataSource"></property>
		<!-- file의 위치를 잡아주는 것 -->
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
	</bean>
	
	<!-- 기본생성자가 없으면 에러 발생 -->
	<bean class="org.mybatis.spring.SqlSessionTemplate" id="sqlSession">
	<!-- sqlSessionFactoryBean을 생성되어야 이 템플릿이 작동될 수 있다 단순 text가 아니므로 ref로 받는다 -->
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
	</bean>
	<bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager" id="dataSourceTransactionManager"> <!--id 의 이름 변경 안됨  -->
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
<!-- 방법1 -->
	<tx:annotation-driven/>	
<!-- 방법2 -->	
	<!-- 위의 Bean으로 인해 transactional을 사용가능 -->
	 <!--id 의 이름 변경 안됨  -->
	 <!-- 특정 메소드명에 조건을 거는 것 , 어노테이션 transactional을 걸지 않아도 자동으로 처리해준다 -->
<!-- 	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			
			<tx:method name="insert*" rollback-for="Exception"/>
			<tx:method name="update*" rollback-for="Exception"/>
			<tx:method name="delete*" rollback-for="Exception"/>
			<tx:method name="select*" rollback-for="Exception"/>
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut expression="execution(public * kh..*Service.*(..))" id="serviceMethod"/> 
		<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethod"/>
	</aop:config> -->
</beans>
